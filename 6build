#!/usr/bin/env perl

# Copyright (C) 2015 by cygx <cygx@cpan.org>
# Distributed under the Boost Software License, Version 1.0

use strict;
use warnings;

my ($build, %configs, %flags, %vars);

sub words {
    local $_ = @_ ? $_[0] : $_;
    my @esc = /\\(.)/g;
    s/\\./<!>/g;
    my @words = split /\s+/;
    for (@words) {
        while (/<!>/) {
            my $esc = shift @esc;
            s/<!>/$esc/;
        }
    }
    @words;
}

sub parse_args {
    # TODO: parse --no-
    for (@_) {
        if (/^\w+$/) {
            warn "Replacing build '$build' with '$_'\n"
                if defined $build;
            $build = $_;
            next;
        }

        my ($flag, $name, $value) = /^(--)?(\w[\w-]*)(?:=(.*))?$/;
        die "Failed to parse '$_'"
            unless defined($name) && (defined($flag) || defined($value));

        if (!defined($flag)) {
            warn "Replacing var '$name' with '$value'\n"
                if exists $vars{$name};
            $vars{$name} = $value;
        }
        elsif (!defined($value)) {
            $flags{$name} = 1;
        }
        else {
            warn "Replacing config '--$name' with '$value'\n"
                if exists $configs{$name};
            $configs{$name} = $value;
        }
    }
}

sub autoconf {
    shift;
    parse_args(@_);

    open my $fh, '<', 'auto.6' or die "Failed to open 'auto.6'";
    while (<$fh>) {
        chomp;
        next if /^\s*$/;

        print "$_\n";

        my (@flags, @configs, @dynconfigs, @vars, @dynvars);
        my @toks = words;
        for (@toks) {
            my ($cond, $flag, $name, $value) =
                /^([?!])?(--)?(\w[\w-]*)(?:=(.*))?$/;

            die "Failed to parse '$_'"
                unless defined($name) && (defined($flag) || defined($value));

            my $store = defined($flag) ?
                (defined($value) ? \%configs : \%flags) : \%vars;

            my $exists = exists $store->{$name};
            my $prevalue = $store->{$name} if $exists;

            if (!defined $cond) {
                goto SKIP if $exists;
                if (!defined($flag)) {
                    if ($value eq '*') { push @dynvars, $name }
                    else { push @vars, [ $name, $value ] }
                }
                elsif (!defined($value)) {
                    push @flags, $name;
                }
                else {
                    if ($value eq '*') { push @dynconfigs, $name }
                    else { push @configs, [ $name, $value ] }
                }
            }
            elsif ($cond eq '?' && $exists) {
                goto SKIP unless !defined($value) || $value eq $prevalue;
            }
            elsif ($cond eq '!' && $exists) {
                goto SKIP unless !defined($value) || $value ne $prevalue;
            }
            else { die sprintf "Precondition '%s$name' not met", $flag // '' }
        }

        while (<$fh>) {
            chomp;
            last if /^\s*$/;

            my @dollars = /\$(\$|\*?\w+)|\$\((\*?\w+)\)/g;
            s/\$(\$|\*?\w+|\(\*?\w+\))/<!>/g;
            while (/<!>/) {
                shift(@dollars) =~ /^(\*)?(.+)/;
                my $dollar = defined($1) ? $ENV{$2} : $vars{$2};
                s/<!>/$dollar/;
            }

            print "$_\n";

            my @out = map { s/\r\n$/\n/r } qx/$_ 2>&1/;
            my $code = $? >> 8;

            print "| $_" for @out;

            if ($code != 0) {
                print "--> failed\n";
                next;
            }

            $configs{$_->[0]} = $_->[1]
                for @configs;

            $flags{$_} = 1
                for @flags;

            if (@dynconfigs) {
                my (%in, %out);
                @in{@dynconfigs} = ();

                for (@out) {
                    if (/^--(\w+)=(\N*)/) {
                        if (exists $in{$1}) {
                            $out{$1} = $2;
                            delete $in{$1};
                        }
                    }
                }

                if (%in) {
                    print "--> incomplete\n";
                    next;
                }

                @configs{keys %out} = values %out;
            }

            if (@dynvars) {
                my (%in, %out);
                @in{@dynvars} = ();

                for (@out) {
                    if (/^(\w+)=(\N*)/) {
                        if (exists $in{$1}) {
                            $out{$1} = $2;
                            delete $in{$1};
                        }
                    }
                }

                if (%in) {
                    print "--> incomplete\n";
                    next;
                }

                @vars{keys %out} = values %out;
            }

            if (@vars) {
                die 'TODO';
            }

            print "--> check\n\n";
            goto DONE;
        }

        print "\n";
        next;

    SKIP:
        print "--> skipped\n\n";

    DONE:
        while (<$fh>) {
            chomp;
            last if /^\s*$/;
        }
    }
    close $fh;
    exit;
}

sub help {
    print <<'EOT';
Usage:

  6build [-C[ ]<DIR>] status

  6build [-C[ ]<DIR>] config <BUILD>
         [--<CONFIG>=<NAME>...] [--<FLAG>...] [<VAR>=<VALUE>...]

  6build [-C[ ]<DIR>] make <TARGET>...

  6build [-C[ ]<DIR>] {reconfig|tryconfig} [<BUILD>]
         [--<CONFIG>=<NAME>...] [--<FLAG>...] [<VAR>[~|+|-]=<VALUE>...]
         [--no-<CONFIG|FLAG|VAR>...]

  6build [-C[ ]<DIR>] {autoconf|automake <TARGET>...}
         [--<CONFIG>=<NAME>...] [--<FLAG>...] [<VAR>=<VALUE>...]
EOT
}

sub unknown {
    $_ = shift;
    my $type = /^-/ ? 'flag' : 'subcommand';
    die "Unknown $type '$_'";
}

if (@ARGV && $ARGV[0] =~ /^-C(.*)/) {
    shift @ARGV;
    my $dir = $1 || shift(@ARGV) || die "No dir passed to cd into";
    chdir($dir) or die "Cannot cd into '$dir'";
}

({
    status => sub { die 'TODO' },
    config => sub { die 'TODO' },
    reconfig => sub { die 'TODO' },
    tryconfig => sub { die 'TODO' },
    make => sub { die 'TODO' },
    autoconf => \&autoconf,
    automake => sub { die 'TODO' },
    '-h' => \&help, '--help' => \&help,
}->{@ARGV ? $ARGV[0] : '-h'} // \&unknown)->(@ARGV);

__END__

=pod

=encoding utf8

=head1 NAME

6build - Yet another build system

=head1 SYNOPSIS

    6build status

    6build config win32 --debug
    6build make test

    6build tryconfig --no-debug
    6build make test

    6build reconfig --no-debug
    6build make install

    6build autoconf
    6build make test

    6build automake test install


=head1 COPYRIGHT AND LICENSE

Copyright (C) 2015 by L<cygx|mailto:cygx@cpan.org>

Distributed under the
L<Boost Software License, Version 1.0|http://www.boost.org/LICENSE_1_0.txt>

=cut

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
